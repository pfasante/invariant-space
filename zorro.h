#define uchar unsigned char

static void AK(uchar s[4][4], uchar k[4][4]);
static void SB(uchar s[4][4]);
static void AC(uchar s[4][4], int round);
static void SR(uchar s[4][4]);
static void MC(uchar s[4][4]);

// -------------------------------------------------- interface for auto.c

#define STATE_SIZE 128
#define CONST_NUM  24

void zorro_init() {}

void zorro_const(void *x, int i) {
  uchar s[4][4] = {};
  AC(s,i+1);
  memcpy(x,s,16);
}

void zorro(void *x) {
  uchar (*s)[4] = (uchar (*)[4]) x;
  SR(s);
  MC(s);
  SB(s);
}

void zorro_print_state(void *x) {
  uchar s[4][4];
  int i,j;
  memcpy(s,x,16);
  for (i=0;i<4;i++) {
    for (j=0;j<4;j++)
      printf("%2x ",s[i][j]);
    puts("");
  }
}

// -------------------------------------------------- implementation

uchar zorro_sbox[256] = {
  0xb2, 0xe5, 0x5e, 0xfd, 0x5f, 0xc5, 0x50, 0xbc, 0xdc, 0x4a, 0xfa, 0x88, 
  0x28, 0xd8, 0xe0, 0xd1, 0xb5, 0xd0, 0x3c, 0xb0, 0x99, 0xc1, 0xe8, 0xe2, 
  0x13, 0x59, 0xa7, 0xfb, 0x71, 0x34, 0x31, 0xf1, 0x9f, 0x3a, 0xce, 0x6e, 
  0xa8, 0xa4, 0xb4, 0x7e, 0x1f, 0xb7, 0x51, 0x1d, 0x38, 0x9d, 0x46, 0x69, 
  0x53, 0x0e, 0x42, 0x1b, 0x0f, 0x11, 0x68, 0xca, 0xaa, 0x06, 0xf0, 0xbd, 
  0x26, 0x6f, 0x00, 0xd9, 0x62, 0xf3, 0x15, 0x60, 0xf2, 0x3d, 0x7f, 0x35, 
  0x63, 0x2d, 0x67, 0x93, 0x1c, 0x91, 0xf9, 0x9c, 0x66, 0x2a, 0x81, 0x20, 
  0x95, 0xf8, 0xe3, 0x4d, 0x5a, 0x6d, 0x24, 0x7b, 0xb9, 0xef, 0xdf, 0xda, 
  0x58, 0xa9, 0x92, 0x76, 0x2e, 0xb3, 0x39, 0x0c, 0x29, 0xcd, 0x43, 0xfe, 
  0xab, 0xf5, 0x94, 0x23, 0x16, 0x80, 0xc0, 0x12, 0x4c, 0xe9, 0x48, 0x19, 
  0x08, 0xae, 0x41, 0x70, 0x84, 0x14, 0xa2, 0xd5, 0xb8, 0x33, 0x65, 0xba, 
  0xed, 0x17, 0xcf, 0x96, 0x1e, 0x3b, 0x0b, 0xc2, 0xc8, 0xb6, 0xbb, 0x8b, 
  0xa1, 0x54, 0x75, 0xc4, 0x10, 0x5d, 0xd6, 0x25, 0x97, 0xe6, 0xfc, 0x49, 
  0xf7, 0x52, 0x18, 0x86, 0x8d, 0xcb, 0xe1, 0xbf, 0xd7, 0x8e, 0x37, 0xbe, 
  0x82, 0xcc, 0x64, 0x90, 0x7c, 0x32, 0x8f, 0x4b, 0xac, 0x1a, 0xea, 0xd3, 
  0xf4, 0x6b, 0x2c, 0xff, 0x55, 0x0a, 0x45, 0x09, 0x89, 0x01, 0x30, 0x2b, 
  0xd2, 0x77, 0x87, 0x72, 0xeb, 0x36, 0xde, 0x9e, 0x8c, 0xdb, 0x6c, 0x9b, 
  0x05, 0x02, 0x4e, 0xaf, 0x04, 0xad, 0x74, 0xc3, 0xee, 0xa6, 0xf6, 0xc7, 
  0x7d, 0x40, 0xd4, 0x0d, 0x3e, 0x5b, 0xec, 0x78, 0xa0, 0xb1, 0x44, 0x73, 
  0x47, 0x5c, 0x98, 0x21, 0x22, 0x61, 0x3f, 0xc6, 0x7a, 0x56, 0xdd, 0xe7, 
  0x85, 0xc9, 0x8a, 0x57, 0x27, 0x07, 0x9a, 0x03, 0xa3, 0x83, 0xe4, 0x6a, 
  0xa5, 0x2f, 0x79, 0x4f};

uchar GF_mul2[256] = {
   0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
   0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
   0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
   0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
   0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
   0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
   0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
   0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
   0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
   0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
   0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
   0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
   0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
   0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
   0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
   0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
};

uchar GF_mul3[256] = {
   0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
   0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
   0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
   0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
   0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
   0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
   0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
   0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
   0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
   0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
   0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
   0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
   0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
   0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
   0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
   0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
};

static void AK(uchar s[4][4], uchar k[4][4]) {
  int i,j;
  for (i=0;i<4;i++)
    for (j=0;j<4;j++)
      s[i][j] ^= k[i][j];
}

static void SB(uchar s[4][4]) {
  int i;
  for (i=0;i<4;i++)
    s[0][i] = zorro_sbox[s[0][i]];
}

static void AC(uchar s[4][4], int round) {
  s[0][0] ^= round;
  s[0][1] ^= round;
  s[0][2] ^= round;
  s[0][3] ^= round<<3;
}

static void SR(uchar s[4][4]) {
  uchar temp;
  temp=s[1][0]; s[1][0]=s[1][1]; s[1][1]=s[1][2]; s[1][2]=s[1][3]; s[1][3]=temp;
  temp=s[2][0]; s[2][0]=s[2][2]; s[2][2]=temp;
  temp=s[2][1]; s[2][1]=s[2][3]; s[2][3]=temp;
  temp=s[3][0]; s[3][0]=s[3][3]; s[3][3]=s[3][2]; s[3][2]=s[3][1]; s[3][1]=temp;
}

static void MC(uchar s[4][4]) {
   uchar c[4];

   c[0]=s[0][0]; c[1]=s[1][0]; c[2]=s[2][0]; c[3]=s[3][0];
   s[0][0]=GF_mul2[c[0]]; s[0][0] ^= GF_mul3[c[1]]; s[0][0] ^= c[2]; s[0][0] ^= c[3];
   s[1][0]=c[0]; s[1][0] ^= GF_mul2[c[1]]; s[1][0] ^= GF_mul3[c[2]]; s[1][0] ^= c[3];
   s[2][0]=c[0]; s[2][0] ^= c[1]; s[2][0] ^= GF_mul2[c[2]]; s[2][0] ^= GF_mul3[c[3]];
   s[3][0]=GF_mul3[c[0]]; s[3][0] ^= c[1]; s[3][0] ^= c[2]; s[3][0] ^= GF_mul2[c[3]];

   c[0]=s[0][1]; c[1]=s[1][1]; c[2]=s[2][1]; c[3]=s[3][1];
   s[0][1]=GF_mul2[c[0]]; s[0][1] ^= GF_mul3[c[1]]; s[0][1] ^= c[2]; s[0][1] ^= c[3];
   s[1][1]=c[0]; s[1][1] ^= GF_mul2[c[1]]; s[1][1] ^= GF_mul3[c[2]]; s[1][1] ^= c[3];
   s[2][1]=c[0]; s[2][1] ^= c[1]; s[2][1] ^= GF_mul2[c[2]]; s[2][1] ^= GF_mul3[c[3]];
   s[3][1]=GF_mul3[c[0]]; s[3][1] ^= c[1]; s[3][1] ^= c[2]; s[3][1] ^= GF_mul2[c[3]];

   c[0]=s[0][2]; c[1]=s[1][2]; c[2]=s[2][2]; c[3]=s[3][2];
   s[0][2]=GF_mul2[c[0]]; s[0][2] ^= GF_mul3[c[1]]; s[0][2] ^= c[2]; s[0][2] ^= c[3];
   s[1][2]=c[0]; s[1][2] ^= GF_mul2[c[1]]; s[1][2] ^= GF_mul3[c[2]]; s[1][2] ^= c[3];
   s[2][2]=c[0]; s[2][2] ^= c[1]; s[2][2] ^= GF_mul2[c[2]]; s[2][2] ^= GF_mul3[c[3]];
   s[3][2]=GF_mul3[c[0]]; s[3][2] ^= c[1]; s[3][2] ^= c[2]; s[3][2] ^= GF_mul2[c[3]];

   c[0]=s[0][3]; c[1]=s[1][3]; c[2]=s[2][3]; c[3]=s[3][3];
   s[0][3]=GF_mul2[c[0]]; s[0][3] ^= GF_mul3[c[1]]; s[0][3] ^= c[2]; s[0][3] ^= c[3];
   s[1][3]=c[0]; s[1][3] ^= GF_mul2[c[1]]; s[1][3] ^= GF_mul3[c[2]]; s[1][3] ^= c[3];
   s[2][3]=c[0]; s[2][3] ^= c[1]; s[2][3] ^= GF_mul2[c[2]]; s[2][3] ^= GF_mul3[c[3]];
   s[3][3]=GF_mul3[c[0]]; s[3][3] ^= c[1]; s[3][3] ^= c[2]; s[3][3] ^= GF_mul2[c[3]];
}

static void zorro_round(uchar s[4][4], int round) {
  SB(s);
  AC(s, round+1);
  SR(s);
  MC(s);
}

static void zorro_step(uchar s[4][4], uchar k[4][4], int round) {  
  zorro_round(s, round);
  zorro_round(s, round+1);
  zorro_round(s, round+2);
  zorro_round(s, round+3);
  AK(s,k);
}

static void zorro_encrypt(uchar pt[4][4], uchar ct[4][4], uchar k[4][4], int round) {
  int i,j;

  for (i=0;i<4;i++)
    for (j=0;j<4;j++)
      ct[i][j] = pt[i][j];

  AK(ct,k);
  for (i=0;i<round;i++)
    zorro_step(ct, k, 4*i);
}
